apiVersion: apps/v1
kind: Deployment
metadata:
  name: internhasha-server
  labels:
    app: internhasha-server
  namespace: internhasha-prod
spec:
  replicas: 1
  selector:
    matchLabels:
      app: internhasha-server
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  revisionHistoryLimit: 4
  template:
    metadata:
      labels:
        app: internhasha-server
    spec:
      nodeSelector:
        phase: prod
      tolerations:
        - effect: NoSchedule
          key: phase
          operator: Equal
          value: prod
      containers:
        - image: busybox #internhasha/internhasha-server:prod-1
          command:
          - sleep
          - "3600"
          name: internhasha-server 
          resources:
            requests:
              cpu: 200m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 256Mi
          ports:
            - containerPort: 8080
          # 실제 이미지로 교체 후 적용
          # startupProbe:
          #   httpGet:
          #     path: /actuator/health/startup
          #     port: 8080
          #   initialDelaySeconds: 10
          #   failureThreshold: 20
          # livenessProbe:
          #   httpGet:
          #     path: /actuator/health/liveness
          #     port: 8080
          # readinessProbe:
          #   httpGet:
          #     path: /actuator/health/readiness
          #     port: 8080
---
apiVersion: v1
kind: Service
metadata:
  namespace: internhasha-prod
  name: internhasha-server
spec:
  type: ClusterIP
  selector:
    app: internhasha-server
  ports:
    - port: 80
      targetPort: 8080
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  namespace: internhasha-prod
  name: internhasha-server
spec:
  gateways:
    - istio-ingress/waffle-ingressgateway
    - mesh
  hosts:
    - api-internhasha.wafflestudio.com
  http:
    - route:
        - destination:
            host: internhasha-server